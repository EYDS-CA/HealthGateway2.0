//
//  Storeage+TestResults.swift
//  BCVaccineCard
//
//  Created by Amir on 2021-11-29.
//

import Foundation

extension StorageService {
    
    
    /// Store a test result from a HealthGateway response
    /// - Parameter gateWayResponse: codable response object from Health Gateway
    /// - Returns: String id of record if stored successfully
    func saveTestResult(gateWayResponse: GatewayTestResultResponse) -> String? {
        let userId = AuthManager().userId()
        let id = gateWayResponse.md5Hash() ?? UUID().uuidString
        
        return saveTestResult(
            for: userId,
               resultId: id,
               patientDisplayName: gateWayResponse.patientDisplayName,
               lab: gateWayResponse.lab,
               reportId: gateWayResponse.reportId,
               collectionDateTime: gateWayResponse.collectionDateTime,
               resultDateTime: gateWayResponse.resultDateTime,
               testName: gateWayResponse.testName,
               testType: gateWayResponse.testType,
               testStatus: gateWayResponse.testStatus,
               testOutcome: gateWayResponse.testOutcome,
               resultTitle: gateWayResponse.resultTitle,
               resultDescription: gateWayResponse.resultDescription,
               resultLink: gateWayResponse.resultLink)
    }
    
    
    /// Store a test result
    /// - Returns: String id of record if stored successfully
    func saveTestResult(
        for userId: String,
        resultId: String,
        patientDisplayName: String?,
        lab: String?,
        reportId: String?,
        collectionDateTime: Date?,
        resultDateTime: Date?,
        testName: String?,
        testType: String?,
        testStatus: String?,
        testOutcome: String?,
        resultTitle: String?,
        resultDescription: String?,
        resultLink: String?) -> String? {
            guard let context = managedContext, let user = fetchUser(id: userId) else {return nil}
            let testResult = TestResult(context: context)
            testResult.id = reportId
            testResult.patientDisplayName = patientDisplayName
            testResult.lab = lab
            testResult.reportId = reportId
            testResult.collectionDateTime = collectionDateTime
            testResult.resultDateTime = resultDateTime
            testResult.testName = testName
            testResult.testType = testType
            testResult.testStatus = testStatus
            testResult.testOutcome = testOutcome
            testResult.resultTitle = resultTitle
            testResult.resultDescription = resultDescription
            testResult.resultLink = resultLink
            testResult.user = user
            do {
                try context.save()
                return testResult.id
            } catch let error as NSError {
                print("Could not save. \(error), \(error.userInfo)")
                return nil
            }
    }
    
    
    /// delete a test result for given id
    /// - Parameter id: id of record. this can be the report id or the id generated by during storage (TestResult.id)
    func deleteTestResult(id: String) {
        guard let context = managedContext else {return}
        do {
            let tests = try context.fetch(TestResult.fetchRequest())
            guard let item = tests.filter({ ($0.id == id) || $0.reportId == id}).first else {return}
            context.delete(item)
            try context.save()
        } catch let error as NSError {
            print("Could not delete. \(error), \(error.userInfo)")
            return
        }
    }
    
    /// Returns all test results stored for user
    /// - Parameter userId: User id. if left empty, the results results for the currently authenticated user.
    /// - Returns: All Test results stored for the given user
    func fetchTestResults(for userId: String? = AuthManager().userId()) -> [TestResult] {
        guard let context = managedContext else {return []}
        do {
            let users = try context.fetch(User.createFetchRequest())
            guard let current = users.filter({$0.userId == userId}).first else {return []}
            return current.testResultArray
        } catch let error as NSError {
            print("Could not fetch. \(error), \(error.userInfo)")
            return []
        }
    }
    
}
