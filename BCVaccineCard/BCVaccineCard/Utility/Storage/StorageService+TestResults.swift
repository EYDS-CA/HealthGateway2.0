//
//  Storeage+TestResults.swift
//  BCVaccineCard
//
//  Created by Amir on 2021-11-29.
//

import Foundation

extension StorageService {
    
    
    /// Store a test result from a HealthGateway response
    /// - Parameter gateWayResponse: codable response object from Health Gateway
    /// - Returns: String id of record if stored successfully
    public func saveTestResult(phn: String, birthdate: Date, gateWayResponse: GatewayTestResultResponse) -> String? {
        let id = gateWayResponse.md5Hash() ?? UUID().uuidString
        
        guard let context = managedContext else {return nil}
        let model = CovidLabTestResult(context: context)
        
        model.id = gateWayResponse.md5Hash()
        model.phn = phn
        model.birthday = birthdate
        model.user = fetchUser()
        
        var testResults: [TestResult] = []
        guard let records = gateWayResponse.resourcePayload?.records else { return nil }
        for record in records {
            if let resultModel = saveTestResult(
                   resultId: id,
                   patientDisplayName: record.patientDisplayName,
                   lab: record.lab,
                   reportId: record.reportId,
                   collectionDateTime: record.collectionDateTimeDate,
                   resultDateTime: record.resultDateTimeDate,
                   testName: record.testName,
                   testType: record.testType,
                   testStatus: record.testStatus,
                   testOutcome: record.testOutcome,
                   resultTitle: record.resultTitle,
                   resultDescription: record.resultDescription,
                   resultLink: record.resultLink) {
                
                testResults.append(resultModel)
                model.addToResults(resultModel)
            }
        }
        
        do {
            try context.save()
            self.notify(event: StorageEvent(event: .Save, entity: .CovidLabTestResult, object: model))
            return id
        } catch let error as NSError {
            print("Could not save. \(error), \(error.userInfo)")
            return nil
        }
    }
    
    
    /// Store a test result
    /// - Returns: String id of record if stored successfully
    private func saveTestResult(
        resultId: String,
        patientDisplayName: String?,
        lab: String?,
        reportId: String?,
        collectionDateTime: Date?,
        resultDateTime: Date?,
        testName: String?,
        testType: String?,
        testStatus: String?,
        testOutcome: String?,
        resultTitle: String?,
        resultDescription: [String]?,
        resultLink: String?) -> TestResult? {
            guard let context = managedContext else {return nil}
            let testResult = TestResult(context: context)
            testResult.id = reportId
            testResult.patientDisplayName = patientDisplayName
            testResult.lab = lab
            testResult.reportId = reportId
            testResult.collectionDateTime = collectionDateTime
            testResult.resultDateTime = resultDateTime
            testResult.testName = testName
            testResult.testType = testType
            testResult.testStatus = testStatus
            testResult.testOutcome = testOutcome
            testResult.resultTitle = resultTitle
            testResult.resultDescription = resultDescription
            testResult.resultLink = resultLink
            do {
                try context.save()
                self.notify(event: StorageEvent(event: .Save, entity: .TestResult, object: testResult))
                return testResult
            } catch let error as NSError {
                print("Could not save. \(error), \(error.userInfo)")
                return nil
            }
    }
    
    
    /// delete a test result for given id
    /// - Parameter id: id of record. this can be the report id or the id generated by during storage (TestResult.id)
    func deleteTestResult(id: String) {
        guard let context = managedContext else {return}
        do {
            let tests = try context.fetch(CovidLabTestResult.fetchRequest())
            guard let item = tests.filter({ ($0.id == id) }).first else {return}
            context.delete(item)
            try context.save()
            self.notify(event: StorageEvent(event: .Delete, entity: .CovidLabTestResult, object: item))
        } catch let error as NSError {
            print("Could not delete. \(error), \(error.userInfo)")
            return
        }
    }
    
    /// Returns all test results stored for user
    /// - Parameter userId: User id. if left empty, the results results for the currently authenticated user.
    /// - Returns: All Test results stored for the given user
    func fetchTestResults(for userId: String? = AuthManager().userId()) -> [CovidLabTestResult] {
        guard let context = managedContext else {return []}
        do {
            let users = try context.fetch(User.fetchRequest())
            guard let current = users.filter({$0.userId == userId}).first else {return []}
            return current.testResultArray
        } catch let error as NSError {
            print("Could not fetch. \(error), \(error.userInfo)")
            return []
        }
    }
    
    /// Update a test result from a HealthGateway response
    /// - Parameter gateWayResponse: codable response object from Health Gateway
    func updateTestResult(gateWayResponse: GatewayTestResultResponse, completion: @escaping(Bool)->Void) {
        // TODO: Update the test result here
    }
    
//    func updateVaccineCard(newData model: LocallyStoredVaccinePassportModel, completion: @escaping(Bool)->Void) {
//        guard let context = managedContext else {return}
//        do {
//            let cards = try context.fetch(VaccineCard.fetchRequest())
//            guard let card = cards.filter({$0.name == model.name && $0.birthDateString == model.birthdate}).first else {return}
//            card.code = model.code
//            card.vaxDates = model.vaxDates
//            card.federalPass = model.fedCode
//            card.phn = model.phn
//            card.firHash = model.hash
//            try context.save()
//            DispatchQueue.main.async {[weak self] in
//                guard let `self` = self else {return}
//                self.notify(event: StorageEvent(event: .Update, entity: .VaccineCard, object: card))
//                return completion(true)
//            }
//        } catch let error as NSError {
//            print("Could not fetch. \(error), \(error.userInfo)")
//            DispatchQueue.main.async {
//                return completion(false)
//            }
//        }
//    }
    
}
